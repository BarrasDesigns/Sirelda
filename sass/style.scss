@use 'colorsFonts';
@use 'primerModulo';
@use 'form';
@use 'video';
@use 'especialidades';

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

#wrapper {
  margin-left: 2.5%;
  width: 95%;
  border-radius: 5%;
  background-color: colorsFonts.$wrapper;
}

body {
  font-family: colorsFonts.$mainFont;
  background-color: colorsFonts.$main;
  color: colorsFonts.$letra;
}

h1,
h2 {
  text-align: center;
}
section{
  margin-top:20px;
  margin-bottom:20px;
  width: 100%;
  display: flex;
  justify-content: center;
  flex-direction: column;
 
}
.ubicacion{
  display: flex;
  justify-content: center;
}

// BOTONES

// Animate the size, inside
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #3529e4, 
  close: #ff7f82, 
  raise: #3529e4, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #98e2ff;
  // hover: #1f7dca;
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    // --hover: #{adjust-hue($color, 45deg)};
    --hover: #1f7dca;
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}

// Basic button styles
button {
  background: none;
  border: 5px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 25px 25px;
  border-radius: 50%;
}

h1 { font-weight: 400; }

code { 
  color: #0627d7;
  font: inherit;
}
@media (max-width: 468px) {
  h1 {
    font-size: 20px;
  }
  h2{
    font-size: 15px;
  }

}